.
├── app.py
├── output.txt
├── print_all.sh
├── static
│   ├── jellyfish.svg
│   ├── script.js
│   ├── shop-four-tiles.svg
│   └── style.css
└── templates
    └── index.html

3 directories, 8 files

=== Contents of app.py ===
from flask import Flask, render_template
from markdown2 import markdown
# from markdown import markdown
from os import path

# --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- #

app = Flask(__name__)

# --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- #

@app.route('/')
def home() :
    sREADME = path.join('../', 'README.md')

    with open(sREADME, 'r', encoding='utf-8') as file:
        md_data = file.read()

    # html_data = markdown(md_data)
    html_data = markdown(md_data, extras={
        'breaks': {'on_newline': True, 'on_backslash': True},
        'tables': True,
        'footnotes': True
    })

    return render_template('index.html', content=html_data)

@app.route('/<path:filename>')
def serve_markdown(filename:str) :

    sPath = path.join('../', filename)

    with open(sPath, 'r', encoding='utf-8') as file:
        md_data = file.read()

    # html_data = markdown(md_data, extras={
    #     'breaks': {'on_newline': True, 'on_backslash': True},
    #     'tables': True,
    #     'footnotes': True,
    #     'fenced-code-blocks': True
    # })
    html_data = markdown(md_data, extras=[
        'break-on-newline',
        'tables',
        'footnotes',
        'fenced-code-blocks'
    ])

    # return render_template_string(html_data)
    return render_template('index.html', content=html_data)

# --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- #

from subprocess import run
from datetime import datetime
# from json import load

@app.route('/execute_script')
def execute_script():

    sCommand = 'echo "JS to Python to Bash: $(date +%Y-%m-%dT%H:%M:%S.%6N)" > ~/TEST.txt'
    lRun = [sCommand]

    run(lRun, shell=True)

    current_time = datetime.now().isoformat().replace('T', ' ')

    return "JS to Python to HTML: " + current_time

# --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- #

if __name__ == '__main__' :
    app.run(host='0.0.0.0', port=50000, debug=True)

=== Contents of templates/index.html ===
<!DOCTYPE html>
<html lang="en">



<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">

    <title>ÇA FONCTIONE</title>
    <link rel="icon" href="{{ url_for('static', filename='shop-four-tiles.svg') }}" type="image/x-icon">

    <!-- <script src="{{ url_for('static', filename='script.js') }}"></script> -->
</head>



<body>
    <header>
        <h1>MechaDelivery de ses morts </h1>
        <p>Je sais pas. </p>
    
        <button onclick="executeScript()">Run Script</button>
        <p id="response"></p>
    
    </header>

    <main>
        <div class="markdown-content">
            {{ content|safe }}
        </div>

        <br>

        <div>
            <iframe src="https://duckduckgo.com" width="600" height="400" title="DuckDuckGo Search"></iframe>
        </div>
    </main>


    <script src="{{ url_for('static', filename='script.js') }}"></script>
</body>



</html>

=== Contents of static/script.js ===
function executeScript() {
    // temp optional loading message
    document.getElementById('response').innerText = 'Executing...';  



    // actual execution 
    fetch('/execute_script')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text();
        })
        .then(data => {
            document.getElementById('response').innerText = data;
        })
        .catch(error => {
            document.getElementById('response').innerText = 'Error: ' + error.message;
        });
}



// function executeScript() {
//     fetch(' ')
//     .then(response => response.text())
//     .then(data => {
//         document.getElementById('response').innerText = data;
//     });
// }




// document.addEventListener('DOMContentLoaded', () => {
//     const sidebar = document.getElementById('sidebar');
//     const content = document.getElementById('content');

//     // Fetch sidebar links
//     fetch('/sidebar')
//         .then(response => response.json())
//         .then(files => {
//             files.forEach(file => {
//                 const link = document.createElement('a');
//                 link.href = `docs/${file}`;
//                 link.textContent = file.replace('.md', '');
//                 link.onclick = (e) => {
//                     e.preventDefault();
//                     loadMarkdown(file);
//                 };
//                 sidebar.appendChild(link);
//             });
//         });

//     // Function to load Markdown content
//     const loadMarkdown = (file) => {
//         fetch(`/docs/${file}`)
//         .then(response => response.text())
//         .then(data => {
//             content.innerHTML = data; // Set the inner HTML to the parsed Markdown
//         })
//         .catch(err => {
//             console.error('Error loading Markdown:', err);
//         });
//     };
// });

